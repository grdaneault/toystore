package com.gjd.UI.Admin;

import java.sql.SQLException;
import java.util.List;

import com.gjd.model.DatabaseConnection;
import com.gjd.model.DatabaseObjects.Address;
import com.gjd.model.DatabaseObjects.USState;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.validator.BeanValidator;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.TextField;

public class AddressControl extends FormLayout {

	private static final long serialVersionUID = 1L;

	private Address address;
	private Address backup;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AddressControl(Address address)
	{
		super();
		this.address = address;
		int state = address.getState() == null ? -1 : address.getState().getId();
		this.backup = new Address(address.getId(), address.getLine1(), address.getLine2(), address.getCity(), state , address.getZip());
		buildMainLayout();
	}

	private void buildMainLayout()
	{
		setSizeUndefined();
		BeanItem<Address> item = new BeanItem<Address>(address);
		BeanItemContainer<USState> stateBeans = new BeanItemContainer<USState>(USState.class);
		stateBeans.addAll(USState.getAllStates());
		this.setImmediate(true);
		
		TextField line1 = new TextField("Line 1", item.getItemProperty("line1"));
		line1.addValidator(new BeanValidator(Address.class, "line1"));
		line1.setWidth("250px");
		line1.setValue(address.getLine1());
		addComponent(line1);
		line1.setRequired(true);
		line1.setNullRepresentation("");
		
		TextField line2 = new TextField("Line 2", item.getItemProperty("line2"));
		line2.addValidator(new BeanValidator(Address.class, "line2"));
		line2.setWidth("250px");
		line2.setNullRepresentation("");
		addComponent(line2);
		
		TextField city = new TextField("City", item.getItemProperty("city"));
		city.addValidator(new BeanValidator(Address.class, "city"));
		city.setWidth("250px");
		city.setRequired(true);
		city.setNullRepresentation("");
		addComponent(city);
		
		
		NativeSelect state = new NativeSelect("State", stateBeans);
		
		try
		{
			DatabaseConnection.getInstance().loadStates();
			List<USState> stateList = USState.getAllStates();
			for (USState s : stateList)
			{
				state.addItem(s);
			}
		}
		catch (SQLException e)
		{
			e.printStackTrace();
			state.addItem("Error loading states.");
			state.setEnabled(false);
		}
		
		
		state.setPropertyDataSource(item.getItemProperty("state"));
		state.setWidth("250px");
		state.markAsDirty();
		
		addComponent(state);
		state.setRequired(true);
		state.setNullSelectionAllowed(false);
		
		TextField zip = new TextField("Zip Code", item.getItemProperty("zip"));
		zip.addValidator(new BeanValidator(Address.class, "zip"));
		System.out.println(zip.isBuffered());
		zip.setWidth("250px");
		zip.setRequired(true);
		zip.setNullRepresentation("");
		addComponent(zip);

	}
	
	public void save()
	{
		DatabaseConnection conn = DatabaseConnection.getInstance();
		conn.saveAddress(address);
	}

	public void reset() {
		System.out.println(this.address);
		address.setLine1(backup.getLine1());
		address.setLine2(backup.getLine2());
		address.setCity(backup.getCity());
		address.setState(backup.getState());
		address.setZip(backup.getZip());
		System.out.println(this.address);
	}
}
